{"ast":null,"code":"// apiService.js\nimport axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\naxios.defaults.withCredentials = true;\nconst BASE_URL = 'http://127.0.0.1:8000/'; // Replace with your Django backend URL\n\nconst apiService = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst setAuthToken = token => {\n  if (token) {\n    apiService.defaults.headers.common['Authorization'] = `Token ${token}`;\n    localStorage.setItem('authToken', token);\n  } else {\n    delete apiService.defaults.headers.common['Authorization'];\n    localStorage.removeItem('authToken');\n  }\n};\nconst getAuthToken = () => {\n  return localStorage.getItem('authToken');\n};\nsetAuthToken(getAuthToken());\nexport const login = async (username, password) => {\n  try {\n    const response = await apiService.post('/login/', {\n      username,\n      password\n    });\n    const token = response.data.token;\n    setAuthToken(token);\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nexport const logout = async () => {\n  try {\n    const response = await apiService.post('/logout/');\n    setAuthToken(null);\n    return response.data;\n  } catch (error) {\n    console.error('Logout error:', error);\n    throw error;\n  }\n};\nexport const getUserDetails = async () => {\n  try {\n    const response = await apiService.get('/user-details/');\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      if (error.response.status === 403 && error.response.data.detail === 'Invalid token.') {\n        // Handle invalid token error\n        setAuthToken(null);\n      }\n    }\n    console.error('User details error:', error);\n    throw error;\n  }\n};\nexport const createBlogPost = async data => {\n  try {\n    const response = await apiService.post('/create-blog-post/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const fillPreMedicalForm = async data => {\n  try {\n    const response = await apiService.post('/fill-pre-medical-form/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const getPatientPosts = async () => {\n  try {\n    const response = await apiService.get('/get-pre-medical-form/');\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const replyToPreMedicalForm = async formId => {\n  try {\n    const response = await apiService.patch(`/reply-to-pre-medical-form/${formId}/`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const createComment = async data => {\n  try {\n    const response = await apiService.post('/create-comment/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","withCredentials","BASE_URL","apiService","create","baseURL","headers","setAuthToken","token","common","localStorage","setItem","removeItem","getAuthToken","getItem","login","username","password","response","post","data","error","console","logout","getUserDetails","get","status","detail","createBlogPost","fillPreMedicalForm","getPatientPosts","replyToPreMedicalForm","formId","patch","createComment"],"sources":["D:/GitHub/Tuesday/frontend/src/web/apiService.js"],"sourcesContent":["// apiService.js\r\nimport axios from 'axios';\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\naxios.defaults.withCredentials = true;\r\nconst BASE_URL = 'http://127.0.0.1:8000/';  // Replace with your Django backend URL\r\n\r\nconst apiService = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    apiService.defaults.headers.common['Authorization'] = `Token ${token}`;\r\n    localStorage.setItem('authToken', token);\r\n  } else {\r\n    delete apiService.defaults.headers.common['Authorization'];\r\n    localStorage.removeItem('authToken');\r\n  }\r\n};\r\n\r\nconst getAuthToken = () => {\r\n  return localStorage.getItem('authToken');\r\n};\r\n\r\nsetAuthToken(getAuthToken());\r\n\r\nexport const login = async (username, password) => {\r\n  try {\r\n    const response = await apiService.post('/login/', { username, password });\r\n    const token = response.data.token;\r\n    setAuthToken(token);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  try {\r\n    const response = await apiService.post('/logout/');\r\n    setAuthToken(null);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserDetails = async () => {\r\n  try {\r\n    const response = await apiService.get('/user-details/');\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      if (error.response.status === 403 && error.response.data.detail === 'Invalid token.') {\r\n        // Handle invalid token error\r\n        setAuthToken(null);\r\n      }\r\n    }\r\n    console.error('User details error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const createBlogPost = async (data) => {\r\n    try {\r\n      const response = await apiService.post('/create-blog-post/', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const fillPreMedicalForm = async (data) => {\r\n    try {\r\n      const response = await apiService.post('/fill-pre-medical-form/', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const getPatientPosts = async () => {\r\n    try {\r\n      const response = await apiService.get('/get-pre-medical-form/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const replyToPreMedicalForm = async (formId) => {\r\n    try {\r\n      const response = await apiService.patch(`/reply-to-pre-medical-form/${formId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const createComment = async (data) => {\r\n    try {\r\n      const response = await apiService.post('/create-comment/', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}