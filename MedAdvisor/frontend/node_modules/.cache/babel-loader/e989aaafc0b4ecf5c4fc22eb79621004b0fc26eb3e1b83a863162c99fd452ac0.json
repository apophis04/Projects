{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\web\\\\cmpts\\\\PatientPostView.js\",\n  _s = $RefreshSig$();\n// PatientPostView.js\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../AuthContext';\nimport { getMessages, createMessage } from '../apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientPostView = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Fetch messages when the component mounts\n    fetchMessages();\n  }, []); // Empty dependency array means this effect runs once when the component mounts\n\n  const fetchMessages = async () => {\n    try {\n      const receivedMessages = await getMessages();\n      setMessages(receivedMessages);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleMessage = async (content, doctorUserId) => {\n    try {\n      await createMessage({\n        content,\n        sender: user.id,\n        receiver: doctorUserId\n      });\n      // You may want to add a success message or update the state to reflect the message\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, message.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMessage('content' /* replace with doctor's user id */),\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientPostView, \"RaDAvnJPqmwHITkj/uB4/v5+7kU=\", false, function () {\n  return [useAuth];\n});\n_c = PatientPostView;\nexport default PatientPostView;\nvar _c;\n$RefreshReg$(_c, \"PatientPostView\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","getMessages","createMessage","jsxDEV","_jsxDEV","PatientPostView","_s","user","messages","setMessages","fetchMessages","receivedMessages","error","console","handleMessage","content","doctorUserId","sender","id","receiver","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/web/cmpts/PatientPostView.js"],"sourcesContent":["// PatientPostView.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../AuthContext';\r\nimport { getMessages, createMessage } from '../apiService';\r\n\r\nconst PatientPostView = () => {\r\n  const { user } = useAuth();\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch messages when the component mounts\r\n    fetchMessages();\r\n  }, []); // Empty dependency array means this effect runs once when the component mounts\r\n\r\n  const fetchMessages = async () => {\r\n    try {\r\n      const receivedMessages = await getMessages();\r\n      setMessages(receivedMessages);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleMessage = async (content, doctorUserId) => {\r\n    try {\r\n      await createMessage({ content, sender: user.id, receiver: doctorUserId });\r\n      // You may want to add a success message or update the state to reflect the message\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Messages</h2>\r\n      {messages.map((message) => (\r\n        <div key={message.id}>\r\n          <p>{message.content}</p>\r\n        </div>\r\n      ))}\r\n      <textarea placeholder=\"Type your message\" />\r\n      <button onClick={() => handleMessage('content', /* replace with doctor's user id */)}>Send Message</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientPostView;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,WAAW,EAAEC,aAAa,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGP,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAW,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,gBAAgB,GAAG,MAAMV,WAAW,CAAC,CAAC;MAC5CQ,WAAW,CAACE,gBAAgB,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAME,aAAa,GAAG,MAAAA,CAAOC,OAAO,EAAEC,YAAY,KAAK;IACrD,IAAI;MACF,MAAMd,aAAa,CAAC;QAAEa,OAAO;QAAEE,MAAM,EAAEV,IAAI,CAACW,EAAE;QAAEC,QAAQ,EAAEH;MAAa,CAAC,CAAC;MACzE;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBhB,QAAQ,CAACiB,GAAG,CAAEC,OAAO,iBACpBtB,OAAA;MAAAgB,QAAA,eACEhB,OAAA;QAAAgB,QAAA,EAAIM,OAAO,CAACX;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,GADhBE,OAAO,CAACR,EAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEf,CACN,CAAC,eACFpB,OAAA;MAAUuB,WAAW,EAAC;IAAmB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5CpB,OAAA;MAAQwB,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAAC,SAAS,CAAE,mCAAmC,CAAE;MAAAM,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxG,CAAC;AAEV,CAAC;AAAClB,EAAA,CAvCID,eAAe;EAAA,QACFL,OAAO;AAAA;AAAA6B,EAAA,GADpBxB,eAAe;AAyCrB,eAAeA,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}