{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\web\\\\cmpts\\\\DoctorPage.js\",\n  _s = $RefreshSig$();\n// DoctorPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../AuthContext';\nimport { getPatientPosts, replyToPreMedicalForm, createComment } from '../apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorPage = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [patientPosts, setPatientPosts] = useState([]);\n  const [commentContent, setCommentContent] = useState('');\n  useEffect(() => {\n    fetchPatientPosts();\n  }, []);\n  const fetchPatientPosts = async () => {\n    try {\n      const posts = await getPatientPosts();\n      setPatientPosts(posts);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleReply = async postId => {\n    try {\n      await replyToPreMedicalForm(postId);\n      // You may want to add a success message or update the state to reflect the reply\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleComment = async (postId, patientUserId) => {\n    try {\n      const doctorId = user.id; // Get the doctor's ID from the authenticated user\n      await createComment({\n        content: commentContent,\n        author: doctorId,\n        // Use the doctor's ID as the author\n        blog_post: postId,\n        commenter_role: 'doctor',\n        receiver: patientUserId\n      });\n\n      // You may want to add a success message or update the state to reflect the comment\n\n      // Clear the comment content after posting\n      setCommentContent('');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), patientPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), post.comments && post.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Doctor ID: \", comment.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), \" \"]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)), !post.form_filled_by_doctor && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleReply(post.id),\n        children: \"Reply to Pre-Medical Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Type your comment\",\n        value: commentContent,\n        onChange: e => setCommentContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleComment(post.id, post.patient),\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorPage, \"MmysvXRztQOhh6NnXKY63g5iSNE=\", false, function () {\n  return [useAuth];\n});\n_c = DoctorPage;\nexport default DoctorPage;\nvar _c;\n$RefreshReg$(_c, \"DoctorPage\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","getPatientPosts","replyToPreMedicalForm","createComment","jsxDEV","_jsxDEV","DoctorPage","_s","user","patientPosts","setPatientPosts","commentContent","setCommentContent","fetchPatientPosts","posts","error","console","handleReply","postId","handleComment","patientUserId","doctorId","id","content","author","blog_post","commenter_role","receiver","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","comments","comment","form_filled_by_doctor","onClick","placeholder","value","onChange","e","target","patient","_c","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/web/cmpts/DoctorPage.js"],"sourcesContent":["// DoctorPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../AuthContext';\r\nimport { getPatientPosts, replyToPreMedicalForm, createComment } from '../apiService';\r\n\r\nconst DoctorPage = () => {\r\n  const { user } = useAuth();\r\n  const [patientPosts, setPatientPosts] = useState([]);\r\n  const [commentContent, setCommentContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchPatientPosts();\r\n  }, []);\r\n\r\n  const fetchPatientPosts = async () => {\r\n    try {\r\n      const posts = await getPatientPosts();\r\n      setPatientPosts(posts);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleReply = async (postId) => {\r\n    try {\r\n      await replyToPreMedicalForm(postId);\r\n      // You may want to add a success message or update the state to reflect the reply\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleComment = async (postId, patientUserId) => {\r\n    try {\r\n      const doctorId = user.id; // Get the doctor's ID from the authenticated user\r\n      await createComment({\r\n        content: commentContent,\r\n        author: doctorId,  // Use the doctor's ID as the author\r\n        blog_post: postId,\r\n        commenter_role: 'doctor',\r\n        receiver: patientUserId,\r\n      });\r\n\r\n      // You may want to add a success message or update the state to reflect the comment\r\n\r\n      // Clear the comment content after posting\r\n      setCommentContent('');\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Patient Posts</h2>\r\n      {patientPosts.map((post) => (\r\n        <div key={post.id}>\r\n          <h3>{post.title}</h3>\r\n          <p>{post.content}</p>\r\n          {post.comments && post.comments.map((comment) => (\r\n            <div key={comment.id}>\r\n              <p>{comment.content}</p>\r\n              <p>Doctor ID: {comment.author}</p> {/* Display the doctor's ID */}\r\n            </div>\r\n          ))}\r\n          {!post.form_filled_by_doctor && (\r\n            <button onClick={() => handleReply(post.id)}>Reply to Pre-Medical Form</button>\r\n          )}\r\n          <textarea\r\n            placeholder=\"Type your comment\"\r\n            value={commentContent}\r\n            onChange={(e) => setCommentContent(e.target.value)}\r\n          />\r\n          <button onClick={() => handleComment(post.id, post.patient)}>Comment</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}