{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\components\\\\UserRole.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\n\n// Create a higher-order component (HOC) for role-based routing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserRole = ({\n  component: Component,\n  allowedRoles,\n  userRole,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, {\n  ...rest,\n  render: props => {\n    if (allowedRoles.includes(userRole)) {\n      return /*#__PURE__*/_jsxDEV(Component, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 24\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 24\n      }, this); // Redirect to the home page or another suitable page\n    }\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 5\n}, this);\n_c = UserRole;\nfunction mapStateToProps(state) {\n  const {\n    user\n  } = state.authentication;\n  return {\n    userRole: user.role\n  };\n}\nconst connectedUserRole = connect(mapStateToProps)(UserRole);\nexport { connectedUserRole as UserRole };\nvar _c;\n$RefreshReg$(_c, \"UserRole\");","map":{"version":3,"names":["React","connect","Route","Redirect","jsxDEV","_jsxDEV","UserRole","component","Component","allowedRoles","userRole","rest","render","props","includes","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","mapStateToProps","state","user","authentication","role","connectedUserRole","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/components/UserRole.js"],"sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\n// Create a higher-order component (HOC) for role-based routing\r\nconst UserRole = ({ component: Component, allowedRoles, userRole, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={(props) => {\r\n            if (allowedRoles.includes(userRole)) {\r\n                return <Component {...props} />;\r\n            } else {\r\n                return <Redirect to=\"/\" />; // Redirect to the home page or another suitable page\r\n            }\r\n        }}\r\n    />\r\n);\r\n\r\nfunction mapStateToProps(state) {\r\n    const { user } = state.authentication;\r\n    return {\r\n        userRole: user.role,\r\n    };\r\n}\r\n\r\nconst connectedUserRole = connect(mapStateToProps)(UserRole);\r\nexport { connectedUserRole as UserRole };\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAEC,YAAY;EAAEC,QAAQ;EAAE,GAAGC;AAAK,CAAC,kBACvEN,OAAA,CAACH,KAAK;EAAA,GACES,IAAI;EACRC,MAAM,EAAGC,KAAK,IAAK;IACf,IAAIJ,YAAY,CAACK,QAAQ,CAACJ,QAAQ,CAAC,EAAE;MACjC,oBAAOL,OAAA,CAACG,SAAS;QAAA,GAAKK;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACnC,CAAC,MAAM;MACH,oBAAOb,OAAA,CAACF,QAAQ;QAACgB,EAAE,EAAC;MAAG;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC,CAAC;IAChC;EACJ;AAAE;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACL,CACJ;AAACE,EAAA,GAXId,QAAQ;AAad,SAASe,eAAeA,CAACC,KAAK,EAAE;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGD,KAAK,CAACE,cAAc;EACrC,OAAO;IACHd,QAAQ,EAAEa,IAAI,CAACE;EACnB,CAAC;AACL;AAEA,MAAMC,iBAAiB,GAAGzB,OAAO,CAACoB,eAAe,CAAC,CAACf,QAAQ,CAAC;AAC5D,SAASoB,iBAAiB,IAAIpB,QAAQ;AAAG,IAAAc,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}