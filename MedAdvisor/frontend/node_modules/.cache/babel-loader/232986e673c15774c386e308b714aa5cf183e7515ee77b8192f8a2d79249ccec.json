{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'; // You can use Redux for state management\nimport HomePage from './components/HomePage';\nimport RegisterPage from './components/RegisterPage';\nimport LoginPage from './components/LoginPage';\nimport UserDetailsPage from './components/UserDetailsPage';\n// Import other components for different URLs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Check if the user is authenticated from Redux or Context\n  const isAuthenticated = useSelector(state => state.isAuthenticated); // Update this as per your state structure\n  const dispatch = useDispatch();\n\n  // You can dispatch an action to maintain the user's authentication state on page reload\n  // Example: dispatch(setAuthenticated(localStorage.getItem('accessToken') !== null));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/register\",\n        component: RegisterPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        component: LoginPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/user-details\",\n        component: UserDetailsPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        component: HomePage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0eqdBkDpbWVVPjzaqX2sbPh/+LU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Route","Switch","useSelector","useDispatch","HomePage","RegisterPage","LoginPage","UserDetailsPage","jsxDEV","_jsxDEV","App","_s","isAuthenticated","state","dispatch","children","path","component","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/App.js"],"sourcesContent":["import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'; // You can use Redux for state management\nimport HomePage from './components/HomePage';\nimport RegisterPage from './components/RegisterPage';\nimport LoginPage from './components/LoginPage';\nimport UserDetailsPage from './components/UserDetailsPage';\n// Import other components for different URLs\n\nfunction App() {\n  // Check if the user is authenticated from Redux or Context\n  const isAuthenticated = useSelector((state) => state.isAuthenticated); // Update this as per your state structure\n  const dispatch = useDispatch();\n\n  // You can dispatch an action to maintain the user's authentication state on page reload\n  // Example: dispatch(setAuthenticated(localStorage.getItem('accessToken') !== null));\n\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/register\" component={RegisterPage} />\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/user-details\" component={UserDetailsPage} />\n        {/* Add other routes for your URLs */}\n        <Route path=\"/\" component={HomePage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAChD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa,CAAC,CAAC;AACxD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,eAAe,MAAM,8BAA8B;AAC1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,eAAe,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACD,eAAe,CAAC,CAAC,CAAC;EACvE,MAAME,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA;;EAEA,oBACEM,OAAA;IAAAM,QAAA,eACEN,OAAA,CAACR,MAAM;MAAAc,QAAA,gBACLN,OAAA,CAACT,KAAK;QAACgB,IAAI,EAAC,WAAW;QAACC,SAAS,EAAEZ;MAAa;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnDZ,OAAA,CAACT,KAAK;QAACgB,IAAI,EAAC,QAAQ;QAACC,SAAS,EAAEX;MAAU;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7CZ,OAAA,CAACT,KAAK;QAACgB,IAAI,EAAC,eAAe;QAACC,SAAS,EAAEV;MAAgB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE1DZ,OAAA,CAACT,KAAK;QAACgB,IAAI,EAAC,GAAG;QAACC,SAAS,EAAEb;MAAS;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACV,EAAA,CAnBQD,GAAG;EAAA,QAEcR,WAAW,EAClBC,WAAW;AAAA;AAAAmB,EAAA,GAHrBZ,GAAG;AAqBZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}