{"ast":null,"code":"// apiService.js\nimport axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\naxios.defaults.withCredentials = true;\nconst BASE_URL = 'http://127.0.0.1:8000/'; // Replace with your Django backend URL\n\nconst apiService = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Function to set the authentication token in the headers\nconst setAuthToken = token => {\n  if (token) {\n    apiService.defaults.headers.common['Authorization'] = `Token ${token}`;\n  } else {\n    delete apiService.defaults.headers.common['Authorization'];\n  }\n};\nexport const login = async (username, password) => {\n  try {\n    const response = await apiService.post('/login/', {\n      username,\n      password\n    });\n    const token = response.data.token; // Assuming your token is returned in the response\n    setAuthToken(token);\n    console.log('Token set:', token); // Log the token to the console for debugging\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error.response.data;\n  }\n};\nexport const logout = async () => {\n  try {\n    const response = await apiService.post('/logout/');\n    setAuthToken(null); // Clear the token on logout\n    return response.data;\n  } catch (error) {\n    // Handle errors\n  }\n};\nexport const getUserDetails = async () => {\n  try {\n    const response = await apiService.get('/user-details/');\n    return response.data;\n  } catch (error) {\n    // Handle errors\n  }\n};\nexport const createBlogPost = async data => {\n  try {\n    const response = await apiService.post('/create-blog-post/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const fillPreMedicalForm = async data => {\n  try {\n    const response = await apiService.post('/fill-pre-medical-form/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const getPatientPosts = async () => {\n  try {\n    const response = await apiService.get('/get-pre-medical-form/');\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// export const getPatientPosts = async () => {\n//   const predefinedUsername = 'dduser';  // Set predefined username for debugging\n//   const predefinedPassword = 'user1234';  // Set predefined password for debugging\n\n//   try {\n//     // Login to obtain the token\n//     const loginResponse = await apiService.post('/login/', { username: predefinedUsername, password: predefinedPassword });\n//     const token = loginResponse.data.token;\n//     setAuthToken(token);\n\n//     // Now you can make the actual request using the obtained token\n//     const postsResponse = await apiService.get('/get-pre-medical-form/');\n//     return postsResponse.data;\n//   } catch (error) {\n//     console.error(error);\n//     throw error;\n//   }\n// };\n\nexport const replyToPreMedicalForm = async formId => {\n  try {\n    const response = await apiService.patch(`/reply-to-pre-medical-form/${formId}/`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const createComment = async data => {\n  try {\n    const response = await apiService.post('/create-comment/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// apiService.js\nexport const getMessages = async () => {\n  const predefinedUsername = 'ccuser'; // Set predefined username for debugging\n  const predefinedPassword = 'user1234'; // Set predefined password for debugging\n\n  try {\n    const response = await apiService.get('/get-messages/');\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\nexport const createMessage = async data => {\n  try {\n    const response = await apiService.post('/send-message/', data);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","withCredentials","BASE_URL","apiService","create","baseURL","headers","setAuthToken","token","common","login","username","password","response","post","data","console","log","error","logout","getUserDetails","get","createBlogPost","fillPreMedicalForm","getPatientPosts","replyToPreMedicalForm","formId","patch","createComment","getMessages","predefinedUsername","predefinedPassword","createMessage"],"sources":["D:/GitHub/Tuesday/frontend/src/web/apiService.js"],"sourcesContent":["// apiService.js\r\nimport axios from 'axios';\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\naxios.defaults.withCredentials = true;\r\nconst BASE_URL = 'http://127.0.0.1:8000/';  // Replace with your Django backend URL\r\n\r\nconst apiService = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Function to set the authentication token in the headers\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    apiService.defaults.headers.common['Authorization'] = `Token ${token}`;\r\n  } else {\r\n    delete apiService.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nexport const login = async (username, password) => {\r\n  try {\r\n    const response = await apiService.post('/login/', { username, password });\r\n    const token = response.data.token;  // Assuming your token is returned in the response\r\n    setAuthToken(token);\r\n    console.log('Token set:', token);  // Log the token to the console for debugging\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error.response.data;\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  try {\r\n    const response = await apiService.post('/logout/');\r\n    setAuthToken(null);  // Clear the token on logout\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle errors\r\n  }\r\n};\r\n\r\nexport const getUserDetails = async () => {\r\n  try {\r\n    const response = await apiService.get('/user-details/');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle errors\r\n  }\r\n};\r\n\r\n\r\nexport const createBlogPost = async (data) => {\r\n    try {\r\n      const response = await apiService.post('/create-blog-post/', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const fillPreMedicalForm = async (data) => {\r\n    try {\r\n      const response = await apiService.post('/fill-pre-medical-form/', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const getPatientPosts = async () => {\r\n    try {\r\n      const response = await apiService.get('/get-pre-medical-form/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n// export const getPatientPosts = async () => {\r\n//   const predefinedUsername = 'dduser';  // Set predefined username for debugging\r\n//   const predefinedPassword = 'user1234';  // Set predefined password for debugging\r\n\r\n//   try {\r\n//     // Login to obtain the token\r\n//     const loginResponse = await apiService.post('/login/', { username: predefinedUsername, password: predefinedPassword });\r\n//     const token = loginResponse.data.token;\r\n//     setAuthToken(token);\r\n\r\n//     // Now you can make the actual request using the obtained token\r\n//     const postsResponse = await apiService.get('/get-pre-medical-form/');\r\n//     return postsResponse.data;\r\n//   } catch (error) {\r\n//     console.error(error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n  \r\n  export const replyToPreMedicalForm = async (formId) => {\r\n    try {\r\n      const response = await apiService.patch(`/reply-to-pre-medical-form/${formId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const createComment = async (data) => {\r\n    try {\r\n      const response = await apiService.post('/create-comment/', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n// apiService.js\r\nexport const getMessages = async () => {\r\n  const predefinedUsername = 'ccuser';  // Set predefined username for debugging\r\n  const predefinedPassword = 'user1234';  // Set predefined password for debugging\r\n\r\n  try {\r\n    const response = await apiService.get('/get-messages/');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createMessage = async (data) => {\r\n  try {\r\n    const response = await apiService.post('/send-message/', data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}