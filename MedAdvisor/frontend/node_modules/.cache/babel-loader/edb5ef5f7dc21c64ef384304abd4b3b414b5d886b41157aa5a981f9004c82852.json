{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\web\\\\Design\\\\Cards.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Import necessary modules and components\nimport { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\n\n// OffCanvasExample component that takes comments as a prop\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction OffCanvasExample({\n  name,\n  comments,\n  ...props\n}) {\n  _s();\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const toggleShow = () => setShow(s => !s);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: toggleShow,\n      className: \"me-2\",\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Offcanvas, {\n      show: show,\n      onHide: handleClose,\n      ...props,\n      children: [/*#__PURE__*/_jsxDEV(Offcanvas.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Offcanvas.Title, {\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Offcanvas.Body, {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Author: \", comment.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// Example component that renders OffCanvasExample for each option\n_s(OffCanvasExample, \"NKb1ZOdhT+qUsWLXSgjSS2bk2C4=\");\n_c = OffCanvasExample;\nfunction Example() {\n  _s2();\n  // Fetch comments for a specific post and pass them as a prop to OffCanvasExample\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    // Replace 'postId' with the actual ID of the post you want to fetch comments for\n    fetchCommentsForPost('postId').then(data => setComments(data)).catch(error => console.error(error));\n  }, []);\n\n  // Function to fetch comments for a specific post\n  const fetchCommentsForPost = async postId => {\n    try {\n      const response = await fetch(`/api/comments/${postId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: options.map((props, idx) => /*#__PURE__*/_jsxDEV(OffCanvasExample, {\n      ...props,\n      comments: comments\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n\n// Render the Example component\n_s2(Example, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c2 = Example;\nrender( /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 70,\n  columnNumber: 8\n}, this));\nvar _c, _c2;\n$RefreshReg$(_c, \"OffCanvasExample\");\n$RefreshReg$(_c2, \"Example\");","map":{"version":3,"names":["useState","useEffect","Button","Offcanvas","jsxDEV","_jsxDEV","Fragment","_Fragment","OffCanvasExample","name","comments","props","_s","show","setShow","handleClose","toggleShow","s","children","variant","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","onHide","Header","closeButton","Title","Body","map","comment","content","author","id","_c","Example","_s2","setComments","fetchCommentsForPost","then","data","catch","error","console","postId","response","fetch","json","options","idx","_c2","render","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/web/Design/Cards.js"],"sourcesContent":["// Import necessary modules and components\r\nimport { useState, useEffect } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Offcanvas from 'react-bootstrap/Offcanvas';\r\n\r\n// OffCanvasExample component that takes comments as a prop\r\nfunction OffCanvasExample({ name, comments, ...props }) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow((s) => !s);\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={toggleShow} className=\"me-2\">\r\n        {name}\r\n      </Button>\r\n      <Offcanvas show={show} onHide={handleClose} {...props}>\r\n        <Offcanvas.Header closeButton>\r\n          <Offcanvas.Title>Comments</Offcanvas.Title>\r\n        </Offcanvas.Header>\r\n        <Offcanvas.Body>\r\n          {/* Render comments here */}\r\n          {comments.map((comment) => (\r\n            <div key={comment.id}>\r\n              <p>{comment.content}</p>\r\n              <p>Author: {comment.author}</p>\r\n            </div>\r\n          ))}\r\n        </Offcanvas.Body>\r\n      </Offcanvas>\r\n    </>\r\n  );\r\n}\r\n\r\n// Example component that renders OffCanvasExample for each option\r\nfunction Example() {\r\n  // Fetch comments for a specific post and pass them as a prop to OffCanvasExample\r\n  const [comments, setComments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Replace 'postId' with the actual ID of the post you want to fetch comments for\r\n    fetchCommentsForPost('postId')\r\n      .then((data) => setComments(data))\r\n      .catch((error) => console.error(error));\r\n  }, []);\r\n\r\n  // Function to fetch comments for a specific post\r\n  const fetchCommentsForPost = async (postId) => {\r\n    try {\r\n      const response = await fetch(`/api/comments/${postId}`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Render OffCanvasExample for each option */}\r\n      {options.map((props, idx) => (\r\n        <OffCanvasExample key={idx} {...props} comments={comments} />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\n// Render the Example component\r\nrender(<Example />);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}