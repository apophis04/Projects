{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\web\\\\cmpts\\\\PatientPostView.js\",\n  _s = $RefreshSig$();\n// PatientPostView.js\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../AuthContext';\nimport { getMessages, createMessage } from '../apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientPostView = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [messages, setMessages] = useState([]);\n  const [selectedDoctorId, setSelectedDoctorId] = useState(null);\n  const [doctors, setDoctors] = useState([]); // Assume you have a list of doctors\n\n  useEffect(() => {\n    // Fetch messages and doctors when the component mounts\n    fetchMessages();\n    fetchDoctors();\n  }, []); // Empty dependency array means this effect runs once when the component mounts\n\n  const fetchMessages = async () => {\n    try {\n      const receivedMessages = await getMessages();\n      setMessages(receivedMessages);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleMessage = async content => {\n    try {\n      // Check if a doctor is selected\n      if (!selectedDoctorId) {\n        console.error('Please select a doctor before sending a message.');\n        return;\n      }\n      await createMessage({\n        content,\n        sender: user.id,\n        receiver: selectedDoctorId\n      });\n      // You may want to add a success message or update the state to reflect the message\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleDoctorSelection = doctorId => {\n    setSelectedDoctorId(doctorId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, message.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), doctors.map(doctor => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDoctorSelection(doctor.id),\n        children: [\"Select \", doctor.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, doctor.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMessage('content'),\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientPostView, \"ksC2w3BrLf4Lvxq1ziMpnUl84Zw=\", false, function () {\n  return [useAuth];\n});\n_c = PatientPostView;\nexport default PatientPostView;\nvar _c;\n$RefreshReg$(_c, \"PatientPostView\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","getMessages","createMessage","jsxDEV","_jsxDEV","PatientPostView","_s","user","messages","setMessages","selectedDoctorId","setSelectedDoctorId","doctors","setDoctors","fetchMessages","fetchDoctors","receivedMessages","error","console","handleMessage","content","sender","id","receiver","handleDoctorSelection","doctorId","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","placeholder","doctor","onClick","name","_c","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/web/cmpts/PatientPostView.js"],"sourcesContent":["// PatientPostView.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../AuthContext';\r\nimport { getMessages, createMessage } from '../apiService';\r\n\r\nconst PatientPostView = () => {\r\n  const { user } = useAuth();\r\n  const [messages, setMessages] = useState([]);\r\n  const [selectedDoctorId, setSelectedDoctorId] = useState(null);\r\n  const [doctors, setDoctors] = useState([]);  // Assume you have a list of doctors\r\n\r\n  useEffect(() => {\r\n    // Fetch messages and doctors when the component mounts\r\n    fetchMessages();\r\n    fetchDoctors();\r\n  }, []); // Empty dependency array means this effect runs once when the component mounts\r\n\r\n  const fetchMessages = async () => {\r\n    try {\r\n      const receivedMessages = await getMessages();\r\n      setMessages(receivedMessages);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleMessage = async (content) => {\r\n    try {\r\n      // Check if a doctor is selected\r\n      if (!selectedDoctorId) {\r\n        console.error('Please select a doctor before sending a message.');\r\n        return;\r\n      }\r\n\r\n      await createMessage({ content, sender: user.id, receiver: selectedDoctorId });\r\n      // You may want to add a success message or update the state to reflect the message\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleDoctorSelection = (doctorId) => {\r\n    setSelectedDoctorId(doctorId);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Messages</h2>\r\n      {messages.map((message) => (\r\n        <div key={message.id}>\r\n          <p>{message.content}</p>\r\n        </div>\r\n      ))}\r\n      <textarea placeholder=\"Type your message\" />\r\n      {/* Display a list of doctors with a button to select each doctor */}\r\n      {doctors.map((doctor) => (\r\n        <div key={doctor.id}>\r\n          <button onClick={() => handleDoctorSelection(doctor.id)}>Select {doctor.name}</button>\r\n        </div>\r\n      ))}\r\n      <button onClick={() => handleMessage('content')}>Send Message</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientPostView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}