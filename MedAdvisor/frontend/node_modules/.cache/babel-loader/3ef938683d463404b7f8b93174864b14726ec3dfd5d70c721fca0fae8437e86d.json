{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Tuesday\\\\frontend\\\\src\\\\web\\\\cmpts\\\\DoctorPage.js\",\n  _s = $RefreshSig$();\n// DoctorPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../AuthContext';\nimport { getPatientPosts, replyToPreMedicalForm, createComment } from '../apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorPage = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [patientPosts, setPatientPosts] = useState([]);\n  const [selectedDoctorId, setSelectedDoctorId] = useState(null); // Add a state to store the selected doctor's ID\n\n  useEffect(() => {\n    // Fetch patient posts when the component mounts\n    fetchPatientPosts();\n  }, []);\n  const fetchPatientPosts = async () => {\n    try {\n      const posts = await getPatientPosts();\n      setPatientPosts(posts);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleReply = async (postId, doctorUserId) => {\n    try {\n      await replyToPreMedicalForm(postId);\n      // Set the selected doctor's ID when replying to the post\n      setSelectedDoctorId(doctorUserId);\n      // You may want to add a success message or update the state to reflect the reply\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleComment = async (postId, content, patientUserId) => {\n    try {\n      // Check if a doctor has replied to the post\n      if (!selectedDoctorId) {\n        console.error('A doctor must reply to the post before commenting.');\n        return;\n      }\n      await createComment({\n        content,\n        author: user.id,\n        blog_post: postId,\n        commenter_role: 'doctor',\n        receiver: patientUserId\n      });\n      // You may want to add a success message or update the state to reflect the comment\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), patientPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), post.comments && post.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)\n      }, comment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)), !post.form_filled_by_doctor && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleReply(post.id, post.patient),\n        children: \"Reply to Pre-Medical Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Type your comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleComment(post.id, 'content', post.patient),\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorPage, \"WRZ/skVfB8/hyaGxoiEWHfKnhfM=\", false, function () {\n  return [useAuth];\n});\n_c = DoctorPage;\nexport default DoctorPage;\nvar _c;\n$RefreshReg$(_c, \"DoctorPage\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","getPatientPosts","replyToPreMedicalForm","createComment","jsxDEV","_jsxDEV","DoctorPage","_s","user","patientPosts","setPatientPosts","selectedDoctorId","setSelectedDoctorId","fetchPatientPosts","posts","error","console","handleReply","postId","doctorUserId","handleComment","content","patientUserId","author","id","blog_post","commenter_role","receiver","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","comments","comment","form_filled_by_doctor","onClick","patient","placeholder","_c","$RefreshReg$"],"sources":["D:/GitHub/Tuesday/frontend/src/web/cmpts/DoctorPage.js"],"sourcesContent":["// DoctorPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../AuthContext';\r\nimport { getPatientPosts, replyToPreMedicalForm, createComment } from '../apiService';\r\n\r\nconst DoctorPage = () => {\r\n  const { user } = useAuth();\r\n  const [patientPosts, setPatientPosts] = useState([]);\r\n  const [selectedDoctorId, setSelectedDoctorId] = useState(null); // Add a state to store the selected doctor's ID\r\n\r\n  useEffect(() => {\r\n    // Fetch patient posts when the component mounts\r\n    fetchPatientPosts();\r\n  }, []);\r\n\r\n  const fetchPatientPosts = async () => {\r\n    try {\r\n      const posts = await getPatientPosts();\r\n      setPatientPosts(posts);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleReply = async (postId, doctorUserId) => {\r\n    try {\r\n      await replyToPreMedicalForm(postId);\r\n      // Set the selected doctor's ID when replying to the post\r\n      setSelectedDoctorId(doctorUserId);\r\n      // You may want to add a success message or update the state to reflect the reply\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleComment = async (postId, content, patientUserId) => {\r\n    try {\r\n      // Check if a doctor has replied to the post\r\n      if (!selectedDoctorId) {\r\n        console.error('A doctor must reply to the post before commenting.');\r\n        return;\r\n      }\r\n\r\n      await createComment({ content, author: user.id, blog_post: postId, commenter_role: 'doctor', receiver: patientUserId });\r\n      // You may want to add a success message or update the state to reflect the comment\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Patient Posts</h2>\r\n      {patientPosts.map((post) => (\r\n        <div key={post.id}>\r\n          <h3>{post.title}</h3>\r\n          <p>{post.content}</p>\r\n          {post.comments && post.comments.map((comment) => (\r\n            <div key={comment.id}>\r\n              <p>{comment.content}</p>\r\n            </div>\r\n          ))}\r\n          {!post.form_filled_by_doctor && (\r\n            <button onClick={() => handleReply(post.id, post.patient)}>Reply to Pre-Medical Form</button>\r\n          )}\r\n          <textarea placeholder=\"Type your comment\" />\r\n          <button onClick={() => handleComment(post.id, 'content', post.patient)}>Comment</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}