{"ast":null,"code":"import { authHeader } from '';\nexport const userService = {\n  login,\n  register,\n  updateProfile\n};\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch('/api/login', requestOptions).then(handleResponse).then(user => {\n    localStorage.setItem('user', JSON.stringify(user)); // Store the user in local storage\n    return user;\n  });\n}\nfunction register(username, password, role) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password,\n      role\n    })\n  };\n  return fetch('/api/register', requestOptions).then(handleResponse).then(user => {\n    localStorage.setItem('user', JSON.stringify(user)); // Store the user in local storage\n    return user;\n  });\n}\nfunction updateProfile(username, email) {\n  // Include the authorization header using authHeader function if needed\n  const requestOptions = {\n    method: 'PUT',\n    headers: authHeader(),\n    body: JSON.stringify({\n      username,\n      email\n    })\n  };\n  return fetch('/api/profile/update', requestOptions).then(handleResponse).then(user => {\n    // You may update the user in local storage if needed\n    return user;\n  });\n}\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n    return data;\n  });\n}","map":{"version":3,"names":["authHeader","userService","login","register","updateProfile","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","localStorage","setItem","role","email","response","text","data","parse","ok","error","message","statusText","Promise","reject"],"sources":["D:/GitHub/Tuesday/frontend/src/actions/userService.js"],"sourcesContent":["import { authHeader } from '';\r\n\r\nexport const userService = {\r\n    login,\r\n    register,\r\n    updateProfile,\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch('/api/login', requestOptions)\r\n        .then(handleResponse)\r\n        .then((user) => {\r\n            localStorage.setItem('user', JSON.stringify(user)); // Store the user in local storage\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction register(username, password, role) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password, role })\r\n    };\r\n\r\n    return fetch('/api/register', requestOptions)\r\n        .then(handleResponse)\r\n        .then((user) => {\r\n            localStorage.setItem('user', JSON.stringify(user)); // Store the user in local storage\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction updateProfile(username, email) {\r\n    // Include the authorization header using authHeader function if needed\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: authHeader(),\r\n        body: JSON.stringify({ username, email })\r\n    };\r\n\r\n    return fetch('/api/profile/update', requestOptions)\r\n        .then(handleResponse)\r\n        .then((user) => {\r\n            // You may update the user in local storage if needed\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then((text) => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,EAAE;AAE7B,OAAO,MAAMC,WAAW,GAAG;EACvBC,KAAK;EACLC,QAAQ;EACRC;AACJ,CAAC;AAED,SAASF,KAAKA,CAACG,QAAQ,EAAEC,QAAQ,EAAE;EAC/B,MAAMC,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEC;IAAS,CAAC;EAC/C,CAAC;EAED,OAAOO,KAAK,CAAC,YAAY,EAAEN,cAAc,CAAC,CACrCO,IAAI,CAACC,cAAc,CAAC,CACpBD,IAAI,CAAEE,IAAI,IAAK;IACZC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACC,SAAS,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACpD,OAAOA,IAAI;EACf,CAAC,CAAC;AACV;AAEA,SAASb,QAAQA,CAACE,QAAQ,EAAEC,QAAQ,EAAEa,IAAI,EAAE;EACxC,MAAMZ,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEC,QAAQ;MAAEa;IAAK,CAAC;EACrD,CAAC;EAED,OAAON,KAAK,CAAC,eAAe,EAAEN,cAAc,CAAC,CACxCO,IAAI,CAACC,cAAc,CAAC,CACpBD,IAAI,CAAEE,IAAI,IAAK;IACZC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACC,SAAS,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACpD,OAAOA,IAAI;EACf,CAAC,CAAC;AACV;AAEA,SAASZ,aAAaA,CAACC,QAAQ,EAAEe,KAAK,EAAE;EACpC;EACA,MAAMb,cAAc,GAAG;IACnBC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAET,UAAU,CAAC,CAAC;IACrBU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEe;IAAM,CAAC;EAC5C,CAAC;EAED,OAAOP,KAAK,CAAC,qBAAqB,EAAEN,cAAc,CAAC,CAC9CO,IAAI,CAACC,cAAc,CAAC,CACpBD,IAAI,CAAEE,IAAI,IAAK;IACZ;IACA,OAAOA,IAAI;EACf,CAAC,CAAC;AACV;AAEA,SAASD,cAAcA,CAACM,QAAQ,EAAE;EAC9B,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACR,IAAI,CAAEQ,IAAI,IAAK;IAClC,MAAMC,IAAI,GAAGD,IAAI,IAAIX,IAAI,CAACa,KAAK,CAACF,IAAI,CAAC;IACrC,IAAI,CAACD,QAAQ,CAACI,EAAE,EAAE;MACd,MAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAO,IAAKN,QAAQ,CAACO,UAAU;MAC3D,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;IAChC;IACA,OAAOH,IAAI;EACf,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}